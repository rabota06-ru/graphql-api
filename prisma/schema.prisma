datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider = "typegraphql-prisma"
    output   = "generated"
}

model Admin {
    id        String   @id @default(cuid())
    login     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

enum UserRole {
    Applicant
    Employer
}

model User {
    id               String            @id @default(cuid())
    login            String            @unique
    role             UserRole
    applicantProfile ApplicantProfile?
    employerProfile  EmployerProfile?
    chatWithAdmin    AdminChat?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
}

model ApplicantProfile {
    id             String                    @id @default(cuid())
    resume         Resume?
    savedVacancies VacancySavedByApplicant[]
    user           User                      @relation(fields: [userId], references: [id])
    userId         String                    @unique
    chats          Chat[]
    createdAt      DateTime                  @default(now())
    updatedAt      DateTime                  @updatedAt
}

model VacancySavedByApplicant {
    applicantProfile   ApplicantProfile @relation(fields: [applicantProfileId], references: [id])
    applicantProfileId String
    vacancy            Vacancy          @relation(fields: [vacancyId], references: [id])
    vacancyId          String
    assignedAt         DateTime         @default(now())

    @@id([applicantProfileId, vacancyId])
}

model EmployerProfile {
    id           String                  @id @default(cuid())
    companyName  String
    description  String
    savedResumes ResumeSavedByEmployer[]
    user         User                    @relation(fields: [userId], references: [id])
    userId       String                  @unique
    vacancies    Vacancy[]
    chats        Chat[]
    createdAt    DateTime                @default(now())
    updatedAt    DateTime                @updatedAt
}

model ResumeSavedByEmployer {
    employerProfile   EmployerProfile @relation(fields: [employerProfileId], references: [id])
    employerProfileId String
    resume            Resume          @relation(fields: [resumeId], references: [id])
    resumeId          String
    assignedAt        DateTime        @default(now())

    @@id([employerProfileId, resumeId])
}

model Resume {
    id                 String                  @id @default(cuid())
    views              Int                     @default(0)
    firstname          String
    lastname           String?
    phone              String
    phoneHidden        Boolean
    birthday           DateTime
    placeOfResidence   Int
    desiredPost        String
    fieldOfActivity    Int
    education          String?
    experience         String?
    aboutMe            String?
    applicantProfile   ApplicantProfile        @relation(fields: [applicantProfileId], references: [id])
    applicantProfileId String                  @unique
    savedBy            ResumeSavedByEmployer[]
    responses          ResponseToVacancy[]
    invitations        InvitationToVacancy[]
    createdAt          DateTime                @default(now())
    updatedAt          DateTime                @updatedAt
}

model Vacancy {
    id              String                    @id @default(cuid())
    employer        EmployerProfile           @relation(fields: [employerId], references: [id])
    employerId      String
    salary          Int
    views           Int                       @default(0)
    post            String
    fieldOfActivity Int
    placeOfWork     Int
    description     String
    duties          String?
    requirements    String?
    workingSchedule String?
    phone           String
    phoneHidden     Boolean
    archived        Boolean                   @default(false)
    archivedReason  String?
    savedBy         VacancySavedByApplicant[]
    responses       ResponseToVacancy[]
    invitations     InvitationToVacancy[]
    createdAt       DateTime                  @default(now())
    updatedAt       DateTime                  @updatedAt
}

model ResponseToVacancy {
    id          String   @id @default(cuid())
    vacancy     Vacancy  @relation(fields: [vacancyId], references: [id])
    vacancyId   String
    resume      Resume   @relation(fields: [resumeId], references: [id])
    resumeId    String
    viewed      Boolean  @default(false)
    coverLetter String?
    createdAt   DateTime @default(now())
}

model InvitationToVacancy {
    id          String   @id @default(cuid())
    vacancy     Vacancy  @relation(fields: [vacancyId], references: [id])
    vacancyId   String
    resume      Resume   @relation(fields: [resumeId], references: [id])
    resumeId    String
    viewed      Boolean  @default(false)
    coverLetter String?
    createdAt   DateTime @default(now())
}

model Chat {
    id                String           @id @default(cuid())
    employer          EmployerProfile  @relation(fields: [employerId], references: [id])
    employerId        String
    applicant         ApplicantProfile @relation(fields: [applicantId], references: [id])
    applicantId       String
    viewedByApplicant Boolean          @default(false)
    viewedByEmployer  Boolean          @default(false)
    messages          ChatMessage[]
    createdAt         DateTime         @default(now())
    updatedAt         DateTime         @updatedAt

    @@unique([employerId, applicantId])
}

model ChatMessage {
    id        String   @id @default(cuid())
    chat      Chat     @relation(fields: [chatId], references: [id])
    chatId    String
    message   String
    sender    UserRole
    createdAt DateTime @default(now())
}

model AdminChat {
    id            String             @id @default(cuid())
    user          User               @relation(fields: [userId], references: [id])
    userId        String             @unique
    viewedByUser  Boolean            @default(false)
    viewedByAdmin Boolean            @default(false)
    messages      AdminChatMessage[]
    createdAt     DateTime           @default(now())
    updatedAt     DateTime           @updatedAt
}

enum AdminChatMessageSender {
    User
    Admin
}

model AdminChatMessage {
    id        String                 @id @default(cuid())
    chat      AdminChat              @relation(fields: [chatId], references: [id])
    chatId    String
    message   String
    sender    AdminChatMessageSender
    createdAt DateTime               @default(now())
}

enum ApplicationType {
    findApplicant
    helpToMakeResume
}

model Application {
    id        String          @id @default(cuid())
    type      ApplicationType
    addition  Json            @default("{}")
    createdAt DateTime        @default(now())
}
