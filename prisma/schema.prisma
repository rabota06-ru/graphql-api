datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

generator typegraphql {
    provider = "typegraphql-prisma"
    output   = "generated"
}

model Admin {
    id        String   @id @default(cuid())
    login     String   @unique
    password  String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Applicant {
    id                 String                    @id @default(cuid())
    phone              String                    @unique
    password           String
    resume             Resume?
    savedVacancies     VacancySavedByApplicant[]
    chatsWithEmployers ApplicantEmployerChat[]
    chatWithAdmin      ApplicantAdminChat?
    createdAt          DateTime                  @default(now())
    updatedAt          DateTime                  @updatedAt
}

model VacancySavedByApplicant {
    applicant   Applicant @relation(fields: [applicantId], references: [id])
    applicantId String
    vacancy     Vacancy   @relation(fields: [vacancyId], references: [id])
    vacancyId   String
    assignedAt  DateTime  @default(now())

    @@id([applicantId, vacancyId])
}

model Vacancy {
    id              String                    @id @default(cuid())
    employer        Employer                  @relation(fields: [employerId], references: [id])
    employerId      String
    salary          Int
    views           Int                       @default(0)
    post            String
    fieldOfActivity Int
    placeOfWork     Int
    description     String
    duties          String?
    requirements    String?
    workingSchedule String?
    phone           String
    phoneHidden     Boolean
    archived        Boolean                   @default(false)
    archivedReason  String?
    savedBy         VacancySavedByApplicant[]
    createdAt       DateTime                  @default(now())
    upatedAt        DateTime                  @updatedAt
}

model Employer {
    id                  String                  @id @default(cuid())
    companyName         String
    description         String
    phone               String                  @unique
    password            String
    savedResumes        ResumeSavedByEmployer[]
    vacancies           Vacancy[]
    chatsWithApplicants ApplicantEmployerChat[]
    chatWithAdmin       EmployerAdminChat?
    createdAt           DateTime                @default(now())
    updatedAt           DateTime                @updatedAt
}

model ResumeSavedByEmployer {
    employer   Employer @relation(fields: [employerId], references: [id])
    employerId String
    resume     Resume   @relation(fields: [resumeId], references: [id])
    resumeId   String
    assignedAt DateTime @default(now())

    @@id([employerId, resumeId])
}

model Resume {
    id               String                  @id @default(cuid())
    applicant        Applicant               @relation(fields: [applicantId], references: [id])
    applicantId      String                  @unique
    views            Int                     @default(0)
    firstname        String
    lastname         String?
    phone            String
    phoneHidden      Boolean
    birthday         DateTime
    placeOfResidence Int
    desiredPost      String?
    fieldOfActivity  Int
    education        String?
    experience       String?
    aboutMe          String?
    savedBy          ResumeSavedByEmployer[]
    createdAt        DateTime                @default(now())
    updatedAt        DateTime                @updatedAt
}

model ApplicantEmployerChat {
    id                String                         @id @default(cuid())
    employer          Employer                       @relation(fields: [employerId], references: [id])
    employerId        String
    applicant         Applicant                      @relation(fields: [applicantId], references: [id])
    applicantId       String
    viewedByEmployer  Boolean                        @default(false)
    viewedByApplicant Boolean                        @default(false)
    messages          ApplicantEmployerChatMessage[]
    createdAt         DateTime                       @default(now())
    updatedAt         DateTime                       @updatedAt
}

model ApplicantEmployerChatMessage {
    id        String                @id @default(cuid())
    chat      ApplicantEmployerChat @relation(fields: [chatId], references: [id])
    chatId    String
    message   String
    createdAt DateTime              @default(now())
}

model EmployerAdminChat {
    id               String                     @id @default(cuid())
    employer         Employer                   @relation(fields: [employerId], references: [id])
    employerId       String                     @unique
    viewedByEmployer Boolean                    @default(false)
    viewedByAdmin    Boolean                    @default(false)
    messages         EmployerAdminChatMessage[]
    createdAt        DateTime                   @default(now())
    updatedAt        DateTime                   @updatedAt
}

model EmployerAdminChatMessage {
    id        String            @id @default(cuid())
    chat      EmployerAdminChat @relation(fields: [chatId], references: [id])
    chatId    String
    message   String
    createdAt DateTime          @default(now())
}

model ApplicantAdminChat {
    id                String                      @id @default(cuid())
    applicant         Applicant                   @relation(fields: [applicantId], references: [id])
    applicantId       String                      @unique
    viewedByApplicant Boolean                     @default(false)
    viewedByAdmin     Boolean                     @default(false)
    messages          ApplicantAdminChatMessage[]
    createdAt         DateTime                    @default(now())
    updatedAt         DateTime                    @updatedAt
}

model ApplicantAdminChatMessage {
    id        String             @id @default(cuid())
    chat      ApplicantAdminChat @relation(fields: [chatId], references: [id])
    chatId    String
    message   String
    createdAt DateTime           @default(now())
}

enum ApplicationType {
    findApplicant
    helpToMakeResume
}

model Application {
    id        String          @id @default(cuid())
    type      ApplicationType
    addition  Json            @default("{}")
    createdAt DateTime        @default(now())
}
